import 'package:flutter/material.dart';
import 'package:get_it/get_it.dart';
import 'package:logger/logger.dart';

import '../../constants/app_colors.dart';
import '../../models/chat_log_model.dart';
import '../../services/ai_processor_service.dart';
import '../../services/chat_log_service.dart';
import '../../services/conversation_service.dart';
import '../home/home_screen.dart';
import 'conversation_list_screen.dart';
import 'models/chat_message_model.dart';
import 'widgets/chat_input_widget.dart';
import 'widgets/chat_message_widget.dart';
import 'widgets/chatbot_overview_widget.dart';
import 'widgets/typing_indicator_widget.dart';

/// M√†n h√¨nh ch√≠nh c·ªßa chatbot - hi·ªÉn th·ªã trong main navigation
class ChatbotPage extends StatelessWidget {
  const ChatbotPage({super.key});

  @override
  Widget build(BuildContext context) {
    return const ChatbotOverviewWidget();
  }
}

/// M√†n h√¨nh chat ƒë·∫ßy ƒë·ªß - ·∫©n menubar
class FullChatScreen extends StatefulWidget {
  final String? conversationId; // ID c·ªßa cu·ªôc h·ªôi tho·∫°i hi·ªán t·∫°i

  const FullChatScreen({super.key, this.conversationId});

  @override
  State<FullChatScreen> createState() => _FullChatScreenState();
}

class _FullChatScreenState extends State<FullChatScreen> {
  final TextEditingController _messageController = TextEditingController();
  final ScrollController _scrollController = ScrollController();
  final List<ChatMessage> _messages = [];
  bool _isTyping = false;
  String? _currentConversationId;
  String _conversationTitle = 'Moni AI Assistant'; // Ti√™u ƒë·ªÅ m·∫∑c ƒë·ªãnh

  // Services
  final GetIt _getIt = GetIt.instance;
  late final AIProcessorService _aiService;
  late final ChatLogService _chatLogService;
  late final ConversationService _conversationService;
  final Logger _logger = Logger();

  @override
  void initState() {
    super.initState();

    // Initialize services
    _aiService = _getIt<AIProcessorService>();
    _chatLogService = _getIt<ChatLogService>();
    _conversationService = _getIt<ConversationService>();

    // Initialize conversation and load chat history
    _initializeConversation();
  }

  Future<void> _initializeConversation() async {
    try {
      // L·∫•y ho·∫∑c t·∫°o conversation
      _currentConversationId = widget.conversationId ??
          await _conversationService.getOrCreateActiveConversation();

      // Load ti√™u ƒë·ªÅ conversation n·∫øu c√≥ conversation ID c·ª• th·ªÉ
      await _loadConversationTitle();

      // Load chat history
      await _loadChatHistory();
    } catch (e) {
      _logger.e('Error initializing conversation: $e');
      // Fallback to welcome message if initialization fails
      _addWelcomeMessage();
    }
  }

  Future<void> _loadConversationTitle() async {
    try {
      if (_currentConversationId != null && !_currentConversationId!.startsWith('temp_')) {
        final conversation = await _conversationService.getConversation(_currentConversationId!);
        if (conversation != null && mounted) {
          setState(() {
            _conversationTitle = conversation.title;
          });
        }
      }
    } catch (e) {
      _logger.w('Error loading conversation title: $e');
      // Gi·ªØ ti√™u ƒë·ªÅ m·∫∑c ƒë·ªãnh n·∫øu c√≥ l·ªói
    }
  }

  Future<void> _loadChatHistory() async {
    try {
      if (_currentConversationId == null) {
        _addWelcomeMessage();
        return;
      }

      // N·∫øu l√† temp conversation, kh√¥ng load history
      if (_currentConversationId!.startsWith('temp_')) {
        _addWelcomeMessage();
        return;
      }
      
      // Load chat logs t·ª´ Firestore
      final logs = await _chatLogService
          .getLogs(
            conversationId: _currentConversationId,
            limit: 20,
          )
          .timeout(const Duration(seconds: 15))
          .first
          .catchError((error) {
        _logger.w('Error loading chat logs: $error');
        return <ChatLogModel>[];
      });

      if (logs.isNotEmpty) {
        // Clear existing messages tr∆∞·ªõc khi load
        _messages.clear();
        
        // Load chat messages
        for (final log in logs.reversed) {
          _messages.add(ChatMessage(
            text: log.question,
            isUser: true,
            timestamp: log.createdAt,
          ));
          _messages.add(ChatMessage(
            text: log.response,
            isUser: false,
            timestamp: log.createdAt,
            transactionId: log.transactionId,
          ));
        }
      } else {
        _addWelcomeMessage();
      }

      if (mounted) {
        setState(() {});
        _scrollToBottom();
      }
    } catch (e) {
      _logger.e('Error loading chat history: $e');
      if (mounted) {
        _addWelcomeMessage();
        setState(() {});
      }
    }
  }

  void _addWelcomeMessage() {
    _messages.add(ChatMessage(
      text:
          "Xin ch√†o! T√¥i l√† Moni AI - tr·ª£ l√Ω t√†i ch√≠nh th√¥ng minh c·ªßa b·∫°n! üëã\n\nT√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n\nüìä Ph√¢n t√≠ch chi ti√™u v√† thu nh·∫≠p\nüí∞ L·∫≠p k·∫ø ho·∫°ch ti·∫øt ki·ªám\nüí° T∆∞ v·∫•n t√†i ch√≠nh c√° nh√¢n\nüéØ ƒê·∫∑t v√† theo d√µi m·ª•c ti√™u t√†i ch√≠nh\n‚ùì Tr·∫£ l·ªùi c√¢u h·ªèi v·ªÅ ·ª©ng d·ª•ng\n\nH√£y cho t√¥i bi·∫øt b·∫°n c·∫ßn h·ªó tr·ª£ g√¨ nh√©! üòä",
      isUser: false,
      timestamp: DateTime.now(),
    ));
    setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.background,
      appBar: AppBar(
        elevation: 0,
        backgroundColor: Colors.white,
        leading: IconButton(
          onPressed: _navigateBackToChatbotTab,
          icon: const Icon(Icons.arrow_back_ios, color: AppColors.textPrimary),
          alignment: Alignment.center,
          padding: EdgeInsets.zero,
          constraints: const BoxConstraints(
            minWidth: 44,
            minHeight: 44,
          ),
        ),
        title: Row(
          children: [
            Container(
              padding: const EdgeInsets.all(8),
              decoration: BoxDecoration(
                gradient: const LinearGradient(
                  colors: [Color(0xFFFF6B35), Color(0xFFFFB56B)],
                ),
                borderRadius: BorderRadius.circular(12),
              ),
              child: const Icon(
                Icons.smart_toy_rounded,
                color: Colors.white,
                size: 20,
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    _conversationTitle,
                    style: const TextStyle(
                      color: AppColors.textPrimary,
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                    ),
                    maxLines: 1,
                    overflow: TextOverflow.ellipsis,
                  ),
                  const Text(
                    'ƒêang ho·∫°t ƒë·ªông',
                    style: TextStyle(
                      color: Color(0xFF4CAF50),
                      fontSize: 12,
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
        actions: [
          IconButton(
            onPressed: _navigateToConversationList,
            icon: const Icon(Icons.history_rounded,
                color: AppColors.textSecondary),
            tooltip: 'Qu·∫£n l√Ω h·ªôi tho·∫°i',
          ),
          IconButton(
            onPressed: _clearChat,
            icon: const Icon(Icons.refresh_rounded,
                color: AppColors.textSecondary),
            tooltip: 'L√†m m·ªõi cu·ªôc tr√≤ chuy·ªán',
          ),
          const SizedBox(width: 8),
        ],
      ),
      body: Column(
        children: [
          // Chat messages
          Expanded(
            child: ListView.builder(
              controller: _scrollController,
              padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
              itemCount: _messages.length,
              itemBuilder: (context, index) {
                return ChatMessageWidget(message: _messages[index]);
              },
            ),
          ),

          // Typing indicator
          if (_isTyping) const TypingIndicatorWidget(),

          // Input area
          ChatInputWidget(
            controller: _messageController,
            onSendMessage: _sendMessage,
            isTyping: _isTyping,
          ),
        ],
      ),
    );
  }

  void _sendMessage() async {
    final text = _messageController.text.trim();
    if (text.isEmpty) return;

    // Th√™m tin nh·∫Øn ng∆∞·ªùi d√πng
    setState(() {
      _messages.add(ChatMessage(
        text: text,
        isUser: true,
        timestamp: DateTime.now(),
      ));
      _isTyping = true;
    });

    _messageController.clear();
    _scrollToBottom();

    try {
      // ƒê·∫£m b·∫£o c√≥ conversation v·ªõi ti√™u ƒë·ªÅ ƒë·ªông
      if (_currentConversationId == null) {
        _currentConversationId =
            await _conversationService.getOrCreateActiveConversation(
          firstQuestion: text,
        );
        
        // Load ti√™u ƒë·ªÅ conversation m·ªõi ƒë∆∞·ª£c t·∫°o
        await _loadConversationTitle();
      }

      // G·ªçi AI service
      final aiResponse = await _aiService.processChatInput(text);

      // Extract transactionId from AI response if it contains [EDIT_BUTTON:transactionId]
      String? transactionId;
      String cleanResponse = aiResponse;

      final editButtonRegex = RegExp(r'\[EDIT_BUTTON:([^\]]+)\]');
      final match = editButtonRegex.firstMatch(aiResponse);
      if (match != null) {
        transactionId = match.group(1);
        cleanResponse = aiResponse.replaceAll(editButtonRegex, '[EDIT_BUTTON]');
      }

      // L∆∞u log chat v·ªõi th√¥ng tin giao d·ªãch n·∫øu c√≥
      await _chatLogService.createLog(
        question: text,
        response: cleanResponse,
        conversationId: _currentConversationId!,
        transactionId: transactionId,
        transactionData: transactionId != null
            ? {
                'transactionId': transactionId,
                'createdAt': DateTime.now().toIso8601String(),
              }
            : null,
      );

      // TƒÉng message count cho conversation (ch·ªâ khi kh√¥ng ph·∫£i conversation t·∫°m th·ªùi)
      if (!_currentConversationId!.startsWith('temp_')) {
        try {
          await _conversationService
              .incrementMessageCount(_currentConversationId!);
        } catch (e) {
          // B·ªè qua l·ªói n·∫øu kh√¥ng th·ªÉ tƒÉng message count
          _logger.e('Kh√¥ng th·ªÉ tƒÉng message count: $e');
        }
      }

      setState(() {
        _isTyping = false;
        _messages.add(ChatMessage(
          text: cleanResponse,
          isUser: false,
          timestamp: DateTime.now(),
          transactionId: transactionId,
        ));
      });
    } catch (e) {
      // Fallback n·∫øu c√≥ l·ªói
      setState(() {
        _isTyping = false;
        _messages.add(ChatMessage(
          text:
              "Xin l·ªói, t√¥i ƒëang g·∫∑p m·ªôt ch√∫t tr·ª•c tr·∫∑c. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t. üòÖ\n\nL·ªói: ${e.toString()}",
          isUser: false,
          timestamp: DateTime.now(),
        ));
      });
    }

    _scrollToBottom();
  }

  void _navigateToConversationList() {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => const ConversationListScreen(),
      ),
    );
  }

  void _navigateBackToChatbotTab() {
    // Quay v·ªÅ m√†n h√¨nh tr∆∞·ªõc ƒë√≥, n·∫øu kh√¥ng c√≥ th√¨ v·ªÅ HomeScreen
    if (Navigator.canPop(context)) {
      Navigator.pop(context);
    } else {
      // N·∫øu kh√¥ng c√≥ m√†n h√¨nh n√†o trong stack, t·∫°o HomeScreen m·ªõi
      Navigator.pushReplacement(
        context,
        MaterialPageRoute(
          builder: (context) => const HomeScreen(),
        ),
      );
    }
  }

  void _clearChat() {
    setState(() {
      _messages.clear();
      _currentConversationId = null;
      _conversationTitle = 'Moni AI Assistant'; // Reset v·ªÅ ti√™u ƒë·ªÅ m·∫∑c ƒë·ªãnh
      _messages.add(ChatMessage(
        text:
            "üîÑ Cu·ªôc tr√≤ chuy·ªán ƒë√£ ƒë∆∞·ª£c l√†m m·ªõi!\n\nT√¥i s·∫µn s√†ng h·ªó tr·ª£ b·∫°n v·ªõi nh·ªØng c√¢u h·ªèi m·ªõi v·ªÅ t√†i ch√≠nh. H√£y b·∫Øt ƒë·∫ßu b·∫±ng c√°ch cho t√¥i bi·∫øt b·∫°n c·∫ßn gi√∫p ƒë·ª° g√¨ nh√©! üòä",
        isUser: false,
        timestamp: DateTime.now(),
      ));
    });
    _scrollToBottom();
  }

  void _scrollToBottom() {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (_scrollController.hasClients) {
        _scrollController.animateTo(
          _scrollController.position.maxScrollExtent,
          duration: const Duration(milliseconds: 300),
          curve: Curves.easeOut,
        );
      }
    });
  }
}
