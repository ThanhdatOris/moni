import 'package:flutter/material.dart';
import 'package:get_it/get_it.dart';

import '../../../../constants/app_colors.dart';
import '../../../../widgets/charts/models/chart_data_model.dart';
import '../../../assistant/models/agent_request_model.dart';
import '../../../assistant/services/global_agent_service.dart';
import '../../widgets/assistant_error_card.dart';
import '../../widgets/assistant_loading_card.dart';
import 'services/analytics_module_coordinator.dart';
import 'widgets/analytics_chart_section.dart';
import 'widgets/analytics_insight_card.dart';
import 'widgets/analytics_quick_actions.dart';
import 'widgets/analytics_summary_card.dart';

/// Enhanced Analytics Module Screen with modern UI components
class AnalyticsScreen extends StatefulWidget {
  const AnalyticsScreen({super.key});

  @override
  State<AnalyticsScreen> createState() => _AnalyticsScreenState();
}

class _AnalyticsScreenState extends State<AnalyticsScreen>
    with TickerProviderStateMixin {
  final GlobalAgentService _agentService = GetIt.instance<GlobalAgentService>();
  final AnalyticsModuleCoordinator _analyticsCoordinator =
      AnalyticsModuleCoordinator();
  late TabController _tabController;

  bool _isLoading = false;
  bool _hasError = false;
  String? _errorMessage;
  String? _aiInsight;
  List<String> _recommendations = [];

  // Financial data
  double _totalIncome = 0;
  double _totalExpense = 0;
  double _balance = 0;
  int _transactionCount = 0;

  // Chart data
  List<ChartDataModel> _categoryData = [];
  List<ChartDataModel> _trendData = [];

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 3, vsync: this);
    _loadData();
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  Future<void> _loadData() async {
    setState(() {
      _isLoading = true;
      _hasError = false;
      _errorMessage = null;
    });

    try {
      // Load financial summary
      await _loadFinancialSummary();

      // Load chart data
      await _loadChartData();

      // Generate AI insights
      await _generateAIInsights();
    } catch (e) {
      setState(() {
        _hasError = true;
        _errorMessage = 'L·ªói t·∫£i d·ªØ li·ªáu: $e';
      });
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> _loadFinancialSummary() async {
    // Use actual data from analytics coordinator
    try {
      final quickAnalysis = await _analyticsCoordinator.performQuickAnalysis();
      final insights = quickAnalysis.spendingInsights;

      setState(() {
        _totalExpense = insights['totalSpending']?.toDouble() ?? 0.0;
        _totalIncome =
            _totalExpense * 1.2; // Estimate income as 120% of expense
        _balance = _totalIncome - _totalExpense;
        _transactionCount = insights['transactionCount']?.toInt() ?? 0;
      });
    } catch (e) {
      // Keep empty state on failure
      setState(() {
        _totalIncome = 0;
        _totalExpense = 0;
        _balance = 0;
        _transactionCount = 0;
      });
    }
  }

  Future<void> _loadChartData() async {
    // Use actual data from analytics coordinator
    try {
      final analysis =
          await _analyticsCoordinator.performComprehensiveAnalysis();
      final categoryDistribution =
          analysis.spendingPatterns.categoryDistribution;

      setState(() {
        _categoryData = categoryDistribution.entries.map((entry) {
          final dist = entry.value;
          return ChartDataModel(
            category:
                dist.categoryId.split('_').last, // Simplified category name
            amount: dist.totalAmount,
            percentage: dist.percentage,
            icon: 'üìä', // Default icon
            color:
                '#${(dist.categoryId.hashCode & 0xFFFFFF).toRadixString(16).padLeft(6, '0')}',
            type: 'expense',
          );
        }).toList();
        // Use analytics data only; if no trend series provided, leave empty
        _trendData = [];
      });
    } catch (e) {
      // Keep empty state on failure
      setState(() {
        _categoryData = [];
        _trendData = [];
      });
    }
  }

  // Removed mock data loader to avoid misleading runtime data

  Future<void> _generateAIInsights() async {
    try {
      // Get analytics data to enhance AI insights
      final priorityActions = await _analyticsCoordinator.getPriorityActions();
      final healthScore =
          (await _analyticsCoordinator.performQuickAnalysis()).healthScore;

      final request = AgentRequest.analytics(
        message:
            'Ph√¢n t√≠ch chi ti√™u th√°ng n√†y v√† ƒë∆∞a ra nh·ªØng insight quan tr·ªçng',
        parameters: {
          'period': 'month',
          'analysis_type': 'comprehensive',
          'total_income': _totalIncome,
          'total_expense': _totalExpense,
          'health_score': healthScore,
          'priority_actions': priorityActions.map((a) => a.title).toList(),
        },
      );

      final response = await _agentService.processRequest(request);

      if (response.isSuccess) {
        setState(() {
          _aiInsight = response.message;
          _recommendations = priorityActions.isNotEmpty
              ? priorityActions.take(3).map((a) => a.description).toList()
              : [
                  'Gi·∫£m chi ti√™u ƒÉn u·ªëng xu·ªëng 25% t·ªïng thu nh·∫≠p',
                  'TƒÉng ti·∫øt ki·ªám l√™n 20% m·ªói th√°ng',
                  'Xem x√©t chuy·ªÉn ƒë·ªïi ph∆∞∆°ng ti·ªán di chuy·ªÉn ti·∫øt ki·ªám h∆°n',
                ];
        });
      }
    } catch (e) {
      // AI insight generation failed, use analytics coordinator for basic insights
      try {
        final analysis = await _analyticsCoordinator.performQuickAnalysis();
        final insights = analysis.spendingInsights;

        setState(() {
          _aiInsight =
              'D·ª±a tr√™n d·ªØ li·ªáu ph√¢n t√≠ch: Chi ti√™u th√°ng n√†y l√† ${insights['totalSpending']?.toStringAsFixed(0) ?? "0"}ƒë. '
              'T√¨nh tr·∫°ng chi ti√™u ƒëang ${analysis.healthScore > 70 ? "t·ªët" : "c·∫ßn c·∫£i thi·ªán"}.';
          _recommendations = [
            'Theo d√µi chi ti√™u h√†ng ng√†y ƒë·ªÉ ki·ªÉm so√°t t·ªët h∆°n',
            'ƒê·∫∑t m·ª•c ti√™u ti·∫øt ki·ªám c·ª• th·ªÉ cho th√°ng t·ªõi',
            'Xem x√©t t·ªëi ∆∞u h√≥a c√°c kho·∫£n chi l·ªõn nh·∫•t',
          ];
        });
      } catch (e2) {
        setState(() {
          _aiInsight = 'Kh√¥ng th·ªÉ t·∫°o insight l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i sau.';
          _recommendations = [];
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        // Consistent tab bar matching other modules
        Container(
          margin: const EdgeInsets.symmetric(horizontal: 40, vertical: 0),
          padding: const EdgeInsets.all(4),
          decoration: BoxDecoration(
            color: AppColors.backgroundLight,
            borderRadius: const BorderRadius.only(
              bottomLeft: Radius.circular(14),
              bottomRight: Radius.circular(14),
            ),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withValues(alpha: 0.06),
                blurRadius: 6,
                offset: const Offset(0, 1),
              ),
            ],
          ),
          child: TabBar(
            controller: _tabController,
            indicatorSize: TabBarIndicatorSize.tab,
            indicator: BoxDecoration(
              borderRadius: BorderRadius.circular(11), // Gi·∫£m t·ª´ 12 xu·ªëng 11
              color: Colors.blue, // Solid xanh d∆∞∆°ng thay v√¨ gradient primary
              boxShadow: [
                BoxShadow(
                  color: Colors.blue.withValues(alpha: 0.3), // ƒê·ªïi m√†u shadow
                  blurRadius: 4, // Gi·∫£m t·ª´ 6 xu·ªëng 4
                  offset: const Offset(0, 1), // Gi·∫£m t·ª´ 2 xu·ªëng 1
                ),
              ],
            ),
            labelColor: Colors.white,
            unselectedLabelColor: AppColors.textSecondary,
            labelStyle: const TextStyle(
                fontSize: 10,
                fontWeight: FontWeight.w600), // Gi·∫£m t·ª´ 12 xu·ªëng 10
            unselectedLabelStyle:
                const TextStyle(fontSize: 10, fontWeight: FontWeight.w400),
            dividerColor: Colors.transparent,
            overlayColor: WidgetStateProperty.all(Colors.transparent),
            splashFactory: NoSplash.splashFactory,
            tabs: const [
              Tab(
                height: 32, // Gi·∫£m t·ª´ 40 xu·ªëng 32
                child: Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Icon(Icons.dashboard_outlined,
                        size: 14), // Gi·∫£m size t·ª´ 16 xu·ªëng 14
                    SizedBox(width: 4), // Gi·∫£m t·ª´ 6 xu·ªëng 4
                    Text('T·ªïng quan'),
                  ],
                ),
              ),
              Tab(
                height: 40,
                child: Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Icon(Icons.bar_chart, size: 14),
                    SizedBox(width: 4),
                    Text('Bi·ªÉu ƒë·ªì'),
                  ],
                ),
              ),
              Tab(
                height: 40,
                child: Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Icon(Icons.psychology, size: 14),
                    SizedBox(width: 4),
                    Text('AI Insights'),
                  ],
                ),
              ),
            ],
          ),
        ),

        const SizedBox(height: 6),

        // Content
        Expanded(
          child: _buildContent(),
        ),
      ],
    );
  }

  Widget _buildContent() {
    if (_isLoading) {
      return const Padding(
        padding: EdgeInsets.all(20),
        child: AssistantLoadingCard(
          showTitle: true,
        ),
      );
    }

    if (_hasError) {
      return Padding(
        padding: const EdgeInsets.all(20),
        child: AssistantErrorCard(
          errorMessage: _errorMessage ?? 'C√≥ l·ªói x·∫£y ra khi t·∫£i d·ªØ li·ªáu',
          onRetry: _loadData,
        ),
      );
    }

    return TabBarView(
      controller: _tabController,
      children: [
        _buildOverviewTab(),
        _buildChartsTab(),
        _buildInsightsTab(),
      ],
    );
  }

  Widget _buildOverviewTab() {
    return Container(
      color: AppColors.background,
      child: RefreshIndicator(
        onRefresh: _loadData,
        child: SingleChildScrollView(
          physics: const AlwaysScrollableScrollPhysics(),
          padding: const EdgeInsets.all(16),
          child: Column(
            children: [
              // Financial Summary
              AnalyticsSummaryCard(
                totalIncome: _totalIncome,
                totalExpense: _totalExpense,
                balance: _balance,
                transactionCount: _transactionCount,
              ),

              const SizedBox(height: 16),

              // Quick Actions
              AnalyticsQuickActions(
                onExportReport: _exportReport,
                onSetBudgetAlert: _setBudgetAlert,
                onViewDetailedReport: _viewDetailedReport,
                onShareInsights: _shareInsights,
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildChartsTab() {
    return Container(
      color: AppColors.background,
      child: RefreshIndicator(
        onRefresh: _loadChartData,
        child: SingleChildScrollView(
          physics: const AlwaysScrollableScrollPhysics(),
          padding: const EdgeInsets.all(16),
          child: AnalyticsChartSection(
            categoryData: _categoryData,
            trendData: _trendData,
            onRefresh: _loadChartData,
          ),
        ),
      ),
    );
  }

  Widget _buildInsightsTab() {
    return Container(
      color: AppColors.background,
      child: RefreshIndicator(
        onRefresh: _generateAIInsights,
        child: SingleChildScrollView(
          physics: const AlwaysScrollableScrollPhysics(),
          padding: const EdgeInsets.all(16),
          child: AnalyticsInsightCard(
            insight: _aiInsight,
            recommendations: _recommendations,
            onRegenerateInsight: _generateAIInsights,
          ),
        ),
      ),
    );
  }

  // Action handlers
  void _exportReport() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('ƒêang xu·∫•t b√°o c√°o...')),
    );
  }

  void _setBudgetAlert() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('Thi·∫øt l·∫≠p c·∫£nh b√°o ng√¢n s√°ch...')),
    );
  }

  void _viewDetailedReport() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('ƒêang t·∫£i b√°o c√°o chi ti·∫øt...')),
    );
  }

  void _shareInsights() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('ƒêang chia s·∫ª insights...')),
    );
  }
}
