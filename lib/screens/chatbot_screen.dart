import 'package:flutter/material.dart';

import '../constants/app_colors.dart';

// A model for a single chat message
class ChatMessage {
  final String text;
  final bool isUser; // True if the message is from the user, false if from the bot
  final DateTime timestamp;

  ChatMessage({required this.text, required this.isUser, required this.timestamp});
}

// Chat overview screen - hi·ªÉn th·ªã trong main navigation
class ChatbotPage extends StatelessWidget {
  const ChatbotPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.background,
      body: SafeArea(
        child: Padding(
          padding: const EdgeInsets.all(20.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Header
              const Text(
                'Tr·ª£ l√Ω AI',
                style: TextStyle(
                  fontSize: 28,
                  fontWeight: FontWeight.bold,
                  color: AppColors.textPrimary,
                ),
              ),
              const SizedBox(height: 8),
              Text(
                'Tr·ª£ l√Ω t√†i ch√≠nh th√¥ng minh c·ªßa b·∫°n',
                style: TextStyle(
                  fontSize: 16,
                  color: AppColors.textSecondary,
                ),
              ),
              const SizedBox(height: 32),
              
              // AI Assistant Card
              GestureDetector(
                onTap: () => Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => const FullChatScreen()),
                ),
                child: Container(
                  width: double.infinity,
                  padding: const EdgeInsets.all(24),
                  decoration: BoxDecoration(
                    gradient: const LinearGradient(
                      colors: [
                        Color(0xFFFF6B35),
                        Color(0xFFFF8E53),
                        Color(0xFFFFB56B),
                      ],
                      begin: Alignment.topLeft,
                      end: Alignment.bottomRight,
                    ),
                    borderRadius: BorderRadius.circular(24),
                    boxShadow: [
                      BoxShadow(
                        color: const Color(0xFFFF6B35).withValues(alpha: 0.3),
                        blurRadius: 20,
                        offset: const Offset(0, 8),
                      ),
                    ],
                  ),
                  child: Column(
                    children: [
                      Container(
                        padding: const EdgeInsets.all(20),
                        decoration: BoxDecoration(
                          color: Colors.white.withValues(alpha: 0.2),
                          borderRadius: BorderRadius.circular(20),
                        ),
                        child: const Icon(
                          Icons.smart_toy_rounded,
                          color: Colors.white,
                          size: 48,
                        ),
                      ),
                      const SizedBox(height: 20),
                      const Text(
                        'Moni AI Assistant',
                        style: TextStyle(
                          color: Colors.white,
                          fontSize: 22,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      const SizedBox(height: 8),
                      Text(
                        'Tr·ª£ l√Ω AI s·∫µn s√†ng h·ªó tr·ª£ b·∫°n ph√¢n t√≠ch t√†i ch√≠nh, l·∫≠p k·∫ø ho·∫°ch ti·∫øt ki·ªám v√† tr·∫£ l·ªùi m·ªçi c√¢u h·ªèi.',
                        textAlign: TextAlign.center,
                        style: TextStyle(
                          color: Colors.white.withValues(alpha: 0.9),
                          fontSize: 14,
                          height: 1.5,
                        ),
                      ),
                      const SizedBox(height: 20),
                      Container(
                        padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 12),
                        decoration: BoxDecoration(
                          color: Colors.white.withValues(alpha: 0.2),
                          borderRadius: BorderRadius.circular(25),
                          border: Border.all(
                            color: Colors.white.withValues(alpha: 0.3),
                            width: 1,
                          ),
                        ),
                        child: Row(
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            Container(
                              width: 8,
                              height: 8,
                              decoration: const BoxDecoration(
                                color: Color(0xFF4CAF50),
                                shape: BoxShape.circle,
                              ),
                            ),
                            const SizedBox(width: 8),
                            const Text(
                              'Online ‚Ä¢ Nh·∫•n ƒë·ªÉ chat',
                              style: TextStyle(
                                color: Colors.white,
                                fontSize: 14,
                                fontWeight: FontWeight.w600,
                              ),
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                ),
              ),
              
              const SizedBox(height: 32),
              
              // Features List
              const Text(
                'T√≠nh nƒÉng n·ªïi b·∫≠t',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: AppColors.textPrimary,
                ),
              ),
              const SizedBox(height: 16),
              
              Expanded(
                child: ListView(
                  children: [
                    _buildFeatureItem(
                      Icons.analytics_rounded,
                      'Ph√¢n t√≠ch chi ti√™u',
                      'Ph√¢n t√≠ch chi ti√™u theo danh m·ª•c v√† ƒë∆∞a ra g·ª£i √Ω t·ªëi ∆∞u h√≥a',
                      const Color(0xFF2196F3),
                    ),
                    _buildFeatureItem(
                      Icons.savings_rounded,
                      'L·∫≠p k·∫ø ho·∫°ch ti·∫øt ki·ªám',
                      'H·ªó tr·ª£ thi·∫øt l·∫≠p m·ª•c ti√™u v√† k·∫ø ho·∫°ch ti·∫øt ki·ªám ph√π h·ª£p',
                      const Color(0xFF4CAF50),
                    ),
                    _buildFeatureItem(
                      Icons.lightbulb_rounded,
                      'T∆∞ v·∫•n t√†i ch√≠nh',
                      'ƒê∆∞a ra l·ªùi khuy√™n v·ªÅ ƒë·∫ßu t∆∞ v√† qu·∫£n l√Ω t√†i ch√≠nh c√° nh√¢n',
                      const Color(0xFFFF9800),
                    ),
                    _buildFeatureItem(
                      Icons.support_agent_rounded,
                      'H·ªó tr·ª£ 24/7',
                      'Tr·∫£ l·ªùi c√¢u h·ªèi v√† h·ªó tr·ª£ s·ª≠ d·ª•ng ·ª©ng d·ª•ng b·∫•t c·ª© l√∫c n√†o',
                      const Color(0xFF9C27B0),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
  
  Widget _buildFeatureItem(IconData icon, String title, String description, Color color) {
    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: AppColors.backgroundLight,
        borderRadius: BorderRadius.circular(16),
        border: Border.all(
          color: AppColors.grey200,
          width: 1,
        ),
      ),
      child: Row(
        children: [
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: color.withValues(alpha: 0.1),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Icon(icon, color: color, size: 24),
          ),
          const SizedBox(width: 16),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  title,
                  style: const TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.w600,
                    color: AppColors.textPrimary,
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  description,
                  style: TextStyle(
                    fontSize: 14,
                    color: AppColors.textSecondary,
                    height: 1.3,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

// Full screen chat - ·∫©n menubar
class FullChatScreen extends StatefulWidget {
  const FullChatScreen({super.key});

  @override
  State<FullChatScreen> createState() => _FullChatScreenState();
}

class _FullChatScreenState extends State<FullChatScreen> {
  final TextEditingController _messageController = TextEditingController();
  final ScrollController _scrollController = ScrollController();
  final List<ChatMessage> _messages = [];
  bool _isTyping = false;

  @override
  void initState() {
    super.initState();
    // Th√™m tin nh·∫Øn ch√†o m·ª´ng
    _messages.add(ChatMessage(
      text: "Xin ch√†o! T√¥i l√† Moni AI - tr·ª£ l√Ω t√†i ch√≠nh th√¥ng minh c·ªßa b·∫°n! üëã\n\nT√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n\nüìä Ph√¢n t√≠ch chi ti√™u v√† thu nh·∫≠p\nüí∞ L·∫≠p k·∫ø ho·∫°ch ti·∫øt ki·ªám\nüí° T∆∞ v·∫•n t√†i ch√≠nh c√° nh√¢n\nüéØ ƒê·∫∑t v√† theo d√µi m·ª•c ti√™u t√†i ch√≠nh\n‚ùì Tr·∫£ l·ªùi c√¢u h·ªèi v·ªÅ ·ª©ng d·ª•ng\n\nH√£y cho t√¥i bi·∫øt b·∫°n c·∫ßn h·ªó tr·ª£ g√¨ nh√©! üòä",
      isUser: false,
      timestamp: DateTime.now(),
    ));
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.background,
      appBar: AppBar(
        elevation: 0,
        backgroundColor: Colors.white,
        leading: IconButton(
          onPressed: () => Navigator.pop(context),
          icon: const Icon(Icons.arrow_back_ios, color: AppColors.textPrimary),
        ),
        title: Row(
          children: [
            Container(
              padding: const EdgeInsets.all(8),
              decoration: BoxDecoration(
                gradient: const LinearGradient(
                  colors: [Color(0xFFFF6B35), Color(0xFFFFB56B)],
                ),
                borderRadius: BorderRadius.circular(12),
              ),
              child: const Icon(
                Icons.smart_toy_rounded,
                color: Colors.white,
                size: 20,
              ),
            ),
            const SizedBox(width: 12),
            const Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'Moni AI Assistant',
                    style: TextStyle(
                      color: AppColors.textPrimary,
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  Text(
                    'ƒêang ho·∫°t ƒë·ªông',
                    style: TextStyle(
                      color: Color(0xFF4CAF50),
                      fontSize: 12,
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
        actions: [
          IconButton(
            onPressed: _clearChat,
            icon: const Icon(Icons.refresh_rounded, color: AppColors.textSecondary),
            tooltip: 'L√†m m·ªõi cu·ªôc tr√≤ chuy·ªán',
          ),
          const SizedBox(width: 8),
        ],
      ),
      body: Column(
        children: [
          // Chat messages
          Expanded(
            child: ListView.builder(
              controller: _scrollController,
              padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
              itemCount: _messages.length,
              itemBuilder: (context, index) {
                return _buildMessage(_messages[index]);
              },
            ),
          ),
          
          // Typing indicator
          if (_isTyping) _buildTypingIndicator(),
          
          // Input area
          _buildInputArea(),
        ],
      ),
    );
  }

  Widget _buildMessage(ChatMessage message) {
    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        mainAxisAlignment: message.isUser ? MainAxisAlignment.end : MainAxisAlignment.start,
        children: [
          if (!message.isUser) ...[
            Container(
              padding: const EdgeInsets.all(6),
              decoration: BoxDecoration(
                gradient: const LinearGradient(
                  colors: [Color(0xFFFF6B35), Color(0xFFFFB56B)],
                ),
                borderRadius: BorderRadius.circular(16),
              ),
              child: const Icon(
                Icons.smart_toy_rounded,
                color: Colors.white,
                size: 16,
              ),
            ),
            const SizedBox(width: 12),
          ],
          Flexible(
            child: Container(
              padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
              decoration: BoxDecoration(
                color: message.isUser 
                  ? const Color(0xFFFF6B35)
                  : Colors.white,
                borderRadius: BorderRadius.only(
                  topLeft: const Radius.circular(20),
                  topRight: const Radius.circular(20),
                  bottomLeft: message.isUser ? const Radius.circular(20) : const Radius.circular(4),
                  bottomRight: message.isUser ? const Radius.circular(4) : const Radius.circular(20),
                ),
                border: message.isUser ? null : Border.all(
                  color: AppColors.grey200,
                  width: 1,
                ),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withValues(alpha: 0.05),
                    blurRadius: 8,
                    offset: const Offset(0, 2),
                  ),
                ],
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    message.text,
                    style: TextStyle(
                      color: message.isUser ? Colors.white : AppColors.textPrimary,
                      fontSize: 15,
                      height: 1.4,
                    ),
                  ),
                  const SizedBox(height: 6),
                  Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Text(
                        _formatTime(message.timestamp),
                        style: TextStyle(
                          color: message.isUser 
                              ? Colors.white.withValues(alpha: 0.8)
                              : AppColors.textLight,
                          fontSize: 11,
                        ),
                      ),
                      if (message.isUser) ...[
                        const SizedBox(width: 4),
                        Icon(
                          Icons.done_all_rounded,
                          size: 14,
                          color: Colors.white.withValues(alpha: 0.8),
                        ),
                      ],
                    ],
                  ),
                ],
              ),
            ),
          ),
          if (message.isUser) ...[
            const SizedBox(width: 12),
            Container(
              padding: const EdgeInsets.all(6),
              decoration: BoxDecoration(
                color: AppColors.primary.withValues(alpha: 0.1),
                borderRadius: BorderRadius.circular(16),
              ),
              child: Icon(
                Icons.person_rounded,
                color: AppColors.primary,
                size: 16,
              ),
            ),
          ],
        ],
      ),
    );
  }

  Widget _buildTypingIndicator() {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      child: Row(
        children: [
          Container(
            padding: const EdgeInsets.all(6),
            decoration: BoxDecoration(
              gradient: const LinearGradient(
                colors: [Color(0xFFFF6B35), Color(0xFFFFB56B)],
              ),
              borderRadius: BorderRadius.circular(16),
            ),
            child: const Icon(
              Icons.smart_toy_rounded,
              color: Colors.white,
              size: 16,
            ),
          ),
          const SizedBox(width: 12),
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: const BorderRadius.only(
                topLeft: Radius.circular(20),
                topRight: Radius.circular(20),
                bottomRight: Radius.circular(20),
                bottomLeft: Radius.circular(4),
              ),
              border: Border.all(color: AppColors.grey200),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withValues(alpha: 0.05),
                  blurRadius: 8,
                  offset: const Offset(0, 2),
                ),
              ],
            ),
            child: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                SizedBox(
                  width: 40,
                  height: 20,
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                    children: List.generate(3, (index) => 
                      Container(
                        width: 6,
                        height: 6,
                        decoration: BoxDecoration(
                          color: AppColors.primary.withValues(alpha: 0.6),
                          shape: BoxShape.circle,
                        ),
                      ),
                    ),
                  ),
                ),
                const SizedBox(width: 8),
                Text(
                  'ƒêang g√µ...',
                  style: TextStyle(
                    color: AppColors.textLight,
                    fontSize: 14,
                    fontStyle: FontStyle.italic,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildInputArea() {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
      decoration: BoxDecoration(
        color: Colors.white,
        border: Border(
          top: BorderSide(color: AppColors.grey200, width: 0.5),
        ),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withValues(alpha: 0.05),
            blurRadius: 10,
            offset: const Offset(0, -2),
          ),
        ],
      ),
      child: SafeArea(
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.end,
          children: [
            Expanded(
              child: Container(
                constraints: const BoxConstraints(maxHeight: 120),
                padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                decoration: BoxDecoration(
                  color: AppColors.grey100,
                  borderRadius: BorderRadius.circular(24),
                  border: Border.all(color: AppColors.grey200, width: 0.5),
                ),
                child: TextField(
                  controller: _messageController,
                  decoration: InputDecoration(
                    hintText: 'Nh·∫≠p tin nh·∫Øn...',
                    hintStyle: TextStyle(
                      color: AppColors.textLight,
                      fontSize: 15,
                    ),
                    border: InputBorder.none,
                    contentPadding: const EdgeInsets.symmetric(vertical: 8),
                  ),
                  maxLines: null,
                  textCapitalization: TextCapitalization.sentences,
                  style: const TextStyle(fontSize: 15),
                ),
              ),
            ),
            const SizedBox(width: 12),
            GestureDetector(
              onTap: _sendMessage,
              child: Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  gradient: const LinearGradient(
                    colors: [Color(0xFFFF6B35), Color(0xFFFFB56B)],
                  ),
                  shape: BoxShape.circle,
                  boxShadow: [
                    BoxShadow(
                      color: const Color(0xFFFF6B35).withValues(alpha: 0.3),
                      blurRadius: 8,
                      offset: const Offset(0, 2),
                    ),
                  ],
                ),
                child: const Icon(
                  Icons.send_rounded,
                  color: Colors.white,
                  size: 20,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _sendMessage() {
    final text = _messageController.text.trim();
    if (text.isEmpty) return;

    // Th√™m tin nh·∫Øn ng∆∞·ªùi d√πng
    setState(() {
      _messages.add(ChatMessage(
        text: text,
        isUser: true,
        timestamp: DateTime.now(),
      ));
      _isTyping = true;
    });

    _messageController.clear();
    _scrollToBottom();

    // Gi·∫£ l·∫≠p ph·∫£n h·ªìi AI
    Future.delayed(const Duration(milliseconds: 1500), () {
      setState(() {
        _isTyping = false;
        _messages.add(ChatMessage(
          text: _generateAIResponse(text),
          isUser: false,
          timestamp: DateTime.now(),
        ));
      });
      _scrollToBottom();
    });
  }

  String _generateAIResponse(String userMessage) {
    final message = userMessage.toLowerCase();
    
    if (message.contains('chi ti√™u') || message.contains('ph√¢n t√≠ch')) {
      return "üìä **Ph√¢n t√≠ch chi ti√™u th√°ng n√†y**\n\nD·ª±a v√†o d·ªØ li·ªáu c·ªßa b·∫°n, t√¥i th·∫•y:\n\nüí∞ **T·ªïng chi ti√™u:** 8.500.000ƒë\nüçΩÔ∏è **ƒÇn u·ªëng:** 35.7% (3.040.000ƒë)\nüõçÔ∏è **Mua s·∫Øm:** 21.4% (1.819.000ƒë)\nüöó **Di chuy·ªÉn:** 17.9% (1.522.000ƒë)\nüéÆ **Gi·∫£i tr√≠:** 14.3% (1.216.000ƒë)\nüè† **H√≥a ƒë∆°n:** 10.7% (909.000ƒë)\n\nüí° **G·ª£i √Ω:** B·∫°n n√™n gi·∫£m chi ti√™u ƒÉn u·ªëng b·∫±ng c√°ch n·∫•u ƒÉn t·∫°i nh√† nhi·ªÅu h∆°n. ƒêi·ªÅu n√†y c√≥ th·ªÉ ti·∫øt ki·ªám 20-30% chi ph√≠ ƒÉn u·ªëng!";
    } else if (message.contains('ti·∫øt ki·ªám') || message.contains('k·∫ø ho·∫°ch')) {
      return "üí∞ **K·∫ø ho·∫°ch ti·∫øt ki·ªám th√¥ng minh**\n\nV·ªõi thu nh·∫≠p v√† chi ti√™u hi·ªán t·∫°i:\n\nüìà **Thu nh·∫≠p:** 15.000.000ƒë\nüìâ **Chi ti√™u:** 8.500.000ƒë\nüíµ **C√≥ th·ªÉ ti·∫øt ki·ªám:** 6.500.000ƒë\n\nüéØ **G·ª£i √Ω ph√¢n b·ªï theo quy t·∫Øc 50/30/20:**\n‚Ä¢ 50% (7.5M) - Nhu c·∫ßu thi·∫øt y·∫øu\n‚Ä¢ 30% (4.5M) - Gi·∫£i tr√≠ & mua s·∫Øm\n‚Ä¢ 20% (3M) - Ti·∫øt ki·ªám & ƒë·∫ßu t∆∞\n\nüöÄ **M·ª•c ti√™u:** V·ªõi 3 tri·ªáu/th√°ng, sau 1 nƒÉm b·∫°n s·∫Ω c√≥ 36 tri·ªáu ƒë·ªìng!";
    } else if (message.contains('hello') || message.contains('xin ch√†o') || message.contains('hi')) {
      return "Xin ch√†o b·∫°n! üëã R·∫•t vui ƒë∆∞·ª£c g·∫∑p b·∫°n!\n\nT√¥i l√† Moni AI, tr·ª£ l√Ω t√†i ch√≠nh ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·∫∑c bi·ªát ƒë·ªÉ gi√∫p b·∫°n qu·∫£n l√Ω t√†i ch√≠nh hi·ªáu qu·∫£ h∆°n.\n\n‚ú® **H√¥m nay t√¥i c√≥ th·ªÉ gi√∫p b·∫°n:**\n‚Ä¢ Ph√¢n t√≠ch chi ti√™u chi ti·∫øt\n‚Ä¢ L·∫≠p k·∫ø ho·∫°ch ti·∫øt ki·ªám c√° nh√¢n\n‚Ä¢ T∆∞ v·∫•n v·ªÅ c√°c kho·∫£n ƒë·∫ßu t∆∞\n‚Ä¢ Theo d√µi ti·∫øn ƒë·ªô m·ª•c ti√™u t√†i ch√≠nh\n\nB·∫°n mu·ªën b·∫Øt ƒë·∫ßu t·ª´ ƒë√¢u nh·ªâ? üòä";
    } else if (message.contains('c·∫£m ∆°n') || message.contains('thank')) {
      return "Kh√¥ng c√≥ g√¨! üòä T√¥i r·∫•t vui khi ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n!\n\nVi·ªác qu·∫£n l√Ω t√†i ch√≠nh t·ªët l√† m·ªôt h√†nh tr√¨nh d√†i, v√† t√¥i s·∫Ω lu√¥n ·ªü ƒë√¢y ƒë·ªÉ ƒë·ªìng h√†nh c√πng b·∫°n.\n\nüåü **Nh·ªõ r·∫±ng:** M·ªói quy·∫øt ƒë·ªãnh t√†i ch√≠nh nh·ªè h√¥m nay s·∫Ω t·∫°o n√™n t∆∞∆°ng lai t√†i ch√≠nh t∆∞∆°i s√°ng c·ªßa b·∫°n!\n\nC√≥ g√¨ c·∫ßn h·ªó tr·ª£ th√™m, c·ª© nh·∫Øn cho t√¥i nh√©! üí™";
    } else {
      return "C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª! üòä\n\nT√¥i ƒë√£ ghi nh·∫≠n th√¥ng tin n√†y v√† s·∫Ω s·ª≠ d·ª•ng ƒë·ªÉ h·ªó tr·ª£ b·∫°n t·ªët h∆°n trong t∆∞∆°ng lai.\n\nü§ñ **M·∫πo:** B·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ:\n‚Ä¢ \"Ph√¢n t√≠ch chi ti√™u c·ªßa t√¥i\"\n‚Ä¢ \"L·∫≠p k·∫ø ho·∫°ch ti·∫øt ki·ªám\"\n‚Ä¢ \"T∆∞ v·∫•n ƒë·∫ßu t∆∞\"\n‚Ä¢ \"M·ª•c ti√™u t√†i ch√≠nh\"\n\nB·∫°n c√≥ c√¢u h·ªèi n√†o kh√°c v·ªÅ t√†i ch√≠nh kh√¥ng? üí°";
    }
  }

  void _clearChat() {
    setState(() {
      _messages.clear();
      _messages.add(ChatMessage(
        text: "üîÑ Cu·ªôc tr√≤ chuy·ªán ƒë√£ ƒë∆∞·ª£c l√†m m·ªõi!\n\nT√¥i s·∫µn s√†ng h·ªó tr·ª£ b·∫°n v·ªõi nh·ªØng c√¢u h·ªèi m·ªõi v·ªÅ t√†i ch√≠nh. H√£y b·∫Øt ƒë·∫ßu b·∫±ng c√°ch cho t√¥i bi·∫øt b·∫°n c·∫ßn gi√∫p ƒë·ª° g√¨ nh√©! üòä",
        isUser: false,
        timestamp: DateTime.now(),
      ));
    });
    _scrollToBottom();
  }

  void _scrollToBottom() {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (_scrollController.hasClients) {
        _scrollController.animateTo(
          _scrollController.position.maxScrollExtent,
          duration: const Duration(milliseconds: 300),
          curve: Curves.easeOut,
        );
      }
    });
  }

  String _formatTime(DateTime time) {
    return "${time.hour.toString().padLeft(2, '0')}:${time.minute.toString().padLeft(2, '0')}";
  }
}
