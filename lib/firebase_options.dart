// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

import 'services/environment_service.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static FirebaseOptions get web => FirebaseOptions(
        apiKey: EnvironmentService.firebaseApiKey,
        appId: EnvironmentService.firebaseAppId,
        messagingSenderId: EnvironmentService.firebaseMessagingSenderId,
        projectId: EnvironmentService.firebaseProjectId,
        authDomain: EnvironmentService.firebaseAuthDomain,
        storageBucket: EnvironmentService.firebaseStorageBucket,
      );

  static FirebaseOptions get android => FirebaseOptions(
        apiKey: EnvironmentService.firebaseApiKey,
        appId: EnvironmentService.firebaseAppId,
        messagingSenderId: EnvironmentService.firebaseMessagingSenderId,
        projectId: EnvironmentService.firebaseProjectId,
        storageBucket: EnvironmentService.firebaseStorageBucket,
      );

  static FirebaseOptions get ios => FirebaseOptions(
        apiKey: EnvironmentService.firebaseApiKey,
        appId: EnvironmentService.firebaseAppId,
        messagingSenderId: EnvironmentService.firebaseMessagingSenderId,
        projectId: EnvironmentService.firebaseProjectId,
        storageBucket: EnvironmentService.firebaseStorageBucket,
        iosClientId: EnvironmentService.getEnv('FIREBASE_IOS_CLIENT_ID'),
        iosBundleId: EnvironmentService.packageName,
      );

  static FirebaseOptions get macos => FirebaseOptions(
        apiKey: EnvironmentService.firebaseApiKey,
        appId: EnvironmentService.firebaseAppId,
        messagingSenderId: EnvironmentService.firebaseMessagingSenderId,
        projectId: EnvironmentService.firebaseProjectId,
        storageBucket: EnvironmentService.firebaseStorageBucket,
        iosClientId: EnvironmentService.getEnv('FIREBASE_MACOS_CLIENT_ID'),
        iosBundleId: EnvironmentService.packageName,
      );

  static FirebaseOptions get windows => FirebaseOptions(
        apiKey: EnvironmentService.firebaseApiKey,
        appId: EnvironmentService.firebaseAppId,
        messagingSenderId: EnvironmentService.firebaseMessagingSenderId,
        projectId: EnvironmentService.firebaseProjectId,
        authDomain: EnvironmentService.firebaseAuthDomain,
        storageBucket: EnvironmentService.firebaseStorageBucket,
      );
}
