import 'dart:io';

import 'package:get_it/get_it.dart';
import 'package:google_generative_ai/google_generative_ai.dart';
import 'package:logger/logger.dart';

import '../models/category_model.dart';
import '../models/transaction_model.dart';
import 'category_service.dart';
import 'environment_service.dart';
import 'transaction_service.dart';

/// Service x·ª≠ l√Ω c√°c ch·ª©c nƒÉng AI s·ª≠ d·ª•ng Gemini API
class AIProcessorService {
  late final GenerativeModel _model;
  final Logger _logger = Logger();
  final GetIt _getIt = GetIt.instance;

  // Cache ƒë·ªÉ tr√°nh g·ªçi API tr√πng l·∫∑p
  final Map<String, String> _categoryCache = {};
  final Map<String, String> _responseCache = {};
  static const int _cacheMaxSize = 100;

  // Rate limiting
  DateTime? _lastApiCall;
  static const Duration _minApiInterval = Duration(milliseconds: 500);

  // Token usage tracking
  int _dailyTokenCount = 0;
  DateTime? _lastTokenReset;
  static const int _dailyTokenLimit = 10000;

  AIProcessorService() {
    // Load API key from environment variables
    final apiKey = EnvironmentService.geminiApiKey;

    if (apiKey.isEmpty) {
      throw Exception('Gemini API key not found in environment variables');
    }

    // Define function declarations for chatbot
    final List<FunctionDeclaration> functions = [
      FunctionDeclaration(
        'addTransaction',
        'Add new transaction to system with correct category and type',
        Schema(
          SchemaType.object,
          properties: {
            'amount': Schema(SchemaType.number,
                description: 'Transaction amount (positive number)'),
            'description': Schema(SchemaType.string,
                description: 'Transaction description'),
            'category': Schema(SchemaType.string,
                description:
                    'Category: "ƒÇn u·ªëng" (food), "ƒêi l·∫°i" (transport), "Mua s·∫Øm" (shopping), "Gi·∫£i tr√≠" (entertainment), "Thu nh·∫≠p" (general income), "L∆∞∆°ng" (salary), "S·ª©c kh·ªèe" (health), "H·ªçc t·∫≠p" (education)'),
            'type': Schema(SchemaType.string,
                description:
                    'Transaction type: "income" for salary/allowance/earning, "expense" for spending/buying'),
            'date': Schema(SchemaType.string,
                description: 'Transaction date (YYYY-MM-DD), optional'),
          },
          requiredProperties: ['amount', 'description', 'category', 'type'],
        ),
      ),
    ];

    // Try modern model first, with fallback options
    try {
      _model = GenerativeModel(
        model: 'gemini-1.5-flash',
        apiKey: apiKey,
        tools: [Tool(functionDeclarations: functions)],
      );
      _logger.i(
          'AI Processor Service initialized with gemini-1.5-flash and function calling');
    } catch (e) {
      _logger
          .w('Failed to initialize gemini-1.5-flash, trying alternative: $e');

      try {
        _model = GenerativeModel(
          model: 'gemini-1.5-flash-001',
          apiKey: apiKey,
          tools: [Tool(functionDeclarations: functions)],
        );
        _logger.i(
            'AI Processor Service initialized with gemini-1.5-flash-001 and function calling');
      } catch (e2) {
        _logger.e('Failed to initialize any Gemini model: $e2');
        throw Exception(
            'Could not initialize Gemini model. Please check your API key and internet connection.');
      }
    }
  }

  /// Tr√≠ch xu·∫•t th√¥ng tin giao d·ªãch t·ª´ h√¨nh ·∫£nh (h√≥a ƒë∆°n, tin nh·∫Øn ng√¢n h√†ng)
  Future<Map<String, dynamic>> extractImageInfo(File imageFile) async {
    try {
      final bytes = await imageFile.readAsBytes();
      final imagePart = DataPart('image/jpeg', bytes);

      final prompt = '''
      H√£y ph√¢n t√≠ch h√¨nh ·∫£nh n√†y v√† tr√≠ch xu·∫•t th√¥ng tin giao d·ªãch t√†i ch√≠nh.
      Tr·∫£ l·ªùi d∆∞·ªõi d·∫°ng JSON v·ªõi c·∫•u tr√∫c sau:
      {
        "amount": s·ªë ti·ªÅn (double),
        "date": ng√†y giao d·ªãch (YYYY-MM-DD),
        "description": m√¥ t·∫£ giao d·ªãch,
        "merchant": t√™n c·ª≠a h√†ng/ng∆∞·ªùi nh·∫≠n (n·∫øu c√≥),
        "type": "income" ho·∫∑c "expense",
        "category_suggestion": g·ª£i √Ω danh m·ª•c
      }
      
      N·∫øu kh√¥ng th·ªÉ x√°c ƒë·ªãnh th√¥ng tin, h√£y tr·∫£ v·ªÅ null cho c√°c tr∆∞·ªùng t∆∞∆°ng ·ª©ng.
      ''';

      final response = await _model.generateContent([
        Content.multi([TextPart(prompt), imagePart])
      ]);

      final result = _parseJsonResponse(response.text ?? '');
      _logger.i('Extracted image info: $result');

      return result;
    } catch (e) {
      _logger.e('L·ªói khi tr√≠ch xu·∫•t th√¥ng tin t·ª´ h√¨nh ·∫£nh: $e');
      throw Exception('Kh√¥ng th·ªÉ x·ª≠ l√Ω h√¨nh ·∫£nh: $e');
    }
  }

  /// X·ª≠ l√Ω ƒë·∫ßu v√†o chat v√† tr·∫£ v·ªÅ ph·∫£n h·ªìi t·ª´ AI
  Future<String> processChatInput(String input) async {
    try {
      // Check rate limit and token usage
      await _checkRateLimit();

      // Estimate tokens
      final estimatedTokens = _estimateTokens(input);
      if (_dailyTokenCount + estimatedTokens > _dailyTokenLimit) {
        return 'Xin l·ªói, b·∫°n ƒë√£ s·ª≠ d·ª•ng h·∫øt quota AI h√¥m nay. Vui l√≤ng th·ª≠ l·∫°i v√†o ng√†y mai! üòÖ';
      }

      _logger.i('Processing chat input: $input');

      final prompt = '''
You are Moni AI, a smart financial assistant. Analyze user input and:

1. If user inputs transaction info, IMMEDIATELY call addTransaction function with correct categorization:

INCOME examples:
- "tr·ª£ c·∫•p 1tr" ‚Üí category: "Thu nh·∫≠p", type: "income"  
- "l∆∞∆°ng 10tr" ‚Üí category: "L∆∞∆°ng", type: "income"
- "b√°n h√†ng 500k" ‚Üí category: "Thu nh·∫≠p", type: "income"

EXPENSE examples:  
- "c∆°m s∆∞·ªùn 20k" ‚Üí category: "ƒÇn u·ªëng", type: "expense"
- "taxi 50k" ‚Üí category: "ƒêi l·∫°i", type: "expense"
- "mua √°o 200k" ‚Üí category: "Mua s·∫Øm", type: "expense"

2. If financial question, provide helpful answer.

3. ALWAYS respond in Vietnamese naturally and friendly.

User input: "$input"
''';

      final response = await _model.generateContent([Content.text(prompt)]);

      // Update token count (estimate response tokens too)
      final responseTokens = _estimateTokens(response.text ?? '');
      _dailyTokenCount += estimatedTokens + responseTokens;
      _logger.i('Token usage: $_dailyTokenCount / $_dailyTokenLimit');

      // Check if AI wants to call functions
      if (response.functionCalls.isNotEmpty) {
        for (final functionCall in response.functionCalls) {
          if (functionCall.name == 'addTransaction') {
            final result = await _handleAddTransaction(functionCall.args);
            return result;
          }
        }
      }

      final result =
          response.text ?? 'Xin l·ªói, t√¥i kh√¥ng hi·ªÉu y√™u c·∫ßu c·ªßa b·∫°n.';

      _logger.i(
          'Processed chat input successfully. Response length: ${result.length}');
      return result;
    } catch (e) {
      _logger.e('L·ªói khi x·ª≠ l√Ω ƒë·∫ßu v√†o chat: $e');

      // Return more helpful error message based on error type
      if (e.toString().contains('API key')) {
        return 'Xin l·ªói, c√≥ v·∫•n ƒë·ªÅ v·ªõi c·∫•u h√¨nh API. Vui l√≤ng ki·ªÉm tra l·∫°i API key.';
      } else if (e.toString().contains('network') ||
          e.toString().contains('connection')) {
        return 'Xin l·ªói, c√≥ v·∫•n ƒë·ªÅ k·∫øt n·ªëi m·∫°ng. Vui l√≤ng ki·ªÉm tra internet v√† th·ª≠ l·∫°i.';
      } else if (e.toString().contains('quota') ||
          e.toString().contains('limit')) {
        return 'Xin l·ªói, ƒë√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n s·ª≠ d·ª•ng API. Vui l√≤ng th·ª≠ l·∫°i sau.';
      } else {
        return 'Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.\n\n(L·ªói: ${e.toString()})';
      }
    }
  }

  /// Handle adding transaction through function call
  Future<String> _handleAddTransaction(Map<String, dynamic> args) async {
    try {
      final transactionService = _getIt<TransactionService>();
      final categoryService = _getIt<CategoryService>();

      // Extract parameters with detailed logging
      final amount = (args['amount'] as num).toDouble();
      final description = args['description'] as String;
      final categoryName = args['category'] as String? ?? 'ƒÇn u·ªëng';
      final typeStr = args['type'] as String? ?? 'expense';
      final dateStr = args['date'] as String?;

      _logger.i('Function call args: $args');
      _logger.i(
          'Extracted - Amount: $amount, Description: $description, Category: $categoryName, Type: $typeStr');

      // Parse transaction type
      final transactionType = typeStr.toLowerCase() == 'income'
          ? TransactionType.income
          : TransactionType.expense;

      // Parse date or use current date
      DateTime transactionDate;
      if (dateStr != null) {
        try {
          transactionDate = DateTime.parse(dateStr);
        } catch (e) {
          transactionDate = DateTime.now();
        }
      } else {
        transactionDate = DateTime.now();
      }

      // Find or create category
      final categoriesStream =
          categoryService.getCategories(type: transactionType);
      final categories = await categoriesStream.first;
      String categoryId = 'other';

      for (final category in categories) {
        if (category.name.toLowerCase() == categoryName.toLowerCase()) {
          categoryId = category.categoryId;
          break;
        }
      }

      // If category not found, create new one
      if (categoryId == 'other') {
        final newCategory = CategoryModel(
          categoryId: '',
          userId: '',
          name: categoryName,
          type: transactionType,
          icon: 'restaurant',
          color: 0xFFFF9800, // Orange color
          createdAt: DateTime.now(),
          updatedAt: DateTime.now(),
        );
        categoryId = await categoryService.createCategory(newCategory);
      }

      // Create transaction with correct amount handling
      final finalAmount = transactionType == TransactionType.expense
          ? amount.abs() // Ensure negative for expenses
          : amount.abs(); // Ensure positive for income

      final transaction = TransactionModel(
        transactionId: '',
        userId: '',
        categoryId: categoryId,
        amount: finalAmount,
        date: transactionDate,
        type: transactionType,
        note: description,
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );

      // Save transaction
      await transactionService.createTransaction(transaction);

      _logger.i(
          'Transaction added successfully: $description - ${amount.toStringAsFixed(0)}ƒë');

      return '''‚úÖ **ƒê√£ th√™m giao d·ªãch th√†nh c√¥ng!**

üí∞ **S·ªë ti·ªÅn:** ${_formatCurrency(amount)}
üìù **M√¥ t·∫£:** $description
üìÅ **Danh m·ª•c:** $categoryName
üìÖ **Ng√†y:** ${transactionDate.day}/${transactionDate.month}/${transactionDate.year}

üéâ Giao d·ªãch ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o h·ªá th·ªëng c·ªßa b·∫°n!

[EDIT_BUTTON]''';
    } catch (e) {
      _logger.e('Error adding transaction: $e');
      return 'Xin l·ªói, c√≥ l·ªói x·∫£y ra khi th√™m giao d·ªãch. Vui l√≤ng th·ª≠ l·∫°i.\n\nL·ªói: ${e.toString()}';
    }
  }

  /// G·ª£i √Ω danh m·ª•c cho giao d·ªãch d·ª±a tr√™n m√¥ t·∫£
  Future<String> suggestCategory(String description) async {
    // Ki·ªÉm tra cache tr∆∞·ªõc
    final cacheKey = description.toLowerCase().trim();
    if (_categoryCache.containsKey(cacheKey)) {
      _logger.i('Category cache hit for: $description');
      return _categoryCache[cacheKey]!;
    }

    try {
      // Check rate limit
      await _checkRateLimit();

      final prompt = '''
Suggest best category for transaction: "$description"
Return Vietnamese category name only: "ƒÇn u·ªëng", "Mua s·∫Øm", "ƒêi l·∫°i", "Gi·∫£i tr√≠", "L∆∞∆°ng", etc.
''';

      // Estimate tokens
      final estimatedTokens = _estimateTokens(prompt);
      if (_dailyTokenCount + estimatedTokens > _dailyTokenLimit) {
        return 'ƒÇn u·ªëng'; // Return default if quota exceeded
      }

      final response = await _model.generateContent([Content.text(prompt)]);
      final result = response.text?.trim() ?? 'Kh√°c';

      // Update token count
      final responseTokens = _estimateTokens(result);
      _dailyTokenCount += estimatedTokens + responseTokens;

      // L∆∞u v√†o cache
      _addToCache(_categoryCache, cacheKey, result);

      _logger.i('Suggested category for "$description": $result');
      return result;
    } catch (e) {
      _logger.e('L·ªói khi g·ª£i √Ω danh m·ª•c: $e');
      return 'ƒÇn u·ªëng'; // Default fallback category
    }
  }

  /// Tr·∫£ l·ªùi c√¢u h·ªèi t√†i ch√≠nh c√° nh√¢n
  Future<String> answerQuestion(String question) async {
    try {
      final prompt = '''
You are a personal finance expert. Answer professionally in Vietnamese with practical advice for Vietnam context.

Question: "$question"
''';

      final response = await _model.generateContent([Content.text(prompt)]);
      final result = response.text ??
          'Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y l√∫c n√†y.';

      _logger.i('Answered question: $result');
      return result;
    } catch (e) {
      _logger.e('L·ªói khi tr·∫£ l·ªùi c√¢u h·ªèi: $e');
      return 'Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra khi tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa b·∫°n.';
    }
  }

  /// Ph√¢n t√≠ch th√≥i quen chi ti√™u v√† ƒë∆∞a ra l·ªùi khuy√™n
  Future<String> analyzeSpendingHabits(
      Map<String, dynamic> transactionData) async {
    try {
      final prompt = '''
Analyze spending habits and give specific advice to improve personal finance. Answer in Vietnamese with clear structure.

Data: ${transactionData.toString()}
''';

      final response = await _model.generateContent([Content.text(prompt)]);
      final result = response.text ?? 'Kh√¥ng th·ªÉ ph√¢n t√≠ch d·ªØ li·ªáu n√†y.';

      _logger.i('Analyzed spending habits');
      return result;
    } catch (e) {
      _logger.e('L·ªói khi ph√¢n t√≠ch th√≥i quen chi ti√™u: $e');
      return 'Xin l·ªói, kh√¥ng th·ªÉ ph√¢n t√≠ch d·ªØ li·ªáu n√†y l√∫c n√†y.';
    }
  }

  /// Add item to cache with size limit
  void _addToCache(Map<String, String> cache, String key, String value) {
    if (cache.length >= _cacheMaxSize) {
      // Remove oldest entry (first in map)
      final firstKey = cache.keys.first;
      cache.remove(firstKey);
    }
    cache[key] = value;
  }

  /// Format currency with Vietnamese formatting
  String _formatCurrency(double amount) {
    final absAmount = amount.abs();
    if (absAmount >= 1000000) {
      final millions = absAmount / 1000000;
      return '${millions.toStringAsFixed(millions == millions.roundToDouble() ? 0 : 1)}tr ƒë';
    } else if (absAmount >= 1000) {
      final thousands = absAmount / 1000;
      return '${thousands.toStringAsFixed(thousands == thousands.roundToDouble() ? 0 : 1)}k ƒë';
    } else {
      return '${absAmount.toStringAsFixed(0)} ƒë';
    }
  }

  /// Parse JSON response t·ª´ Gemini
  Map<String, dynamic> _parseJsonResponse(String response) {
    try {
      // T√¨m v√† tr√≠ch xu·∫•t JSON t·ª´ response
      final jsonStart = response.indexOf('{');
      final jsonEnd = response.lastIndexOf('}');

      if (jsonStart != -1 && jsonEnd != -1) {
        // final jsonString = response.substring(jsonStart, jsonEnd + 1);
        // C√≥ th·ªÉ c·∫ßn parse JSON ·ªü ƒë√¢y, nh∆∞ng ƒë·ªÉ ƒë∆°n gi·∫£n t·∫°m th·ªùi return map r·ªóng
        return {};
      }

      return {};
    } catch (e) {
      _logger.e('L·ªói khi parse JSON response: $e');
      return {};
    }
  }

  /// Check rate limit and token usage before API call
  Future<void> _checkRateLimit() async {
    // Check daily token reset
    final now = DateTime.now();
    if (_lastTokenReset == null ||
        now.difference(_lastTokenReset!).inDays >= 1) {
      _dailyTokenCount = 0;
      _lastTokenReset = now;
    }

    // Check daily token limit
    if (_dailyTokenCount >= _dailyTokenLimit) {
      throw Exception('Daily token limit exceeded. Please try again tomorrow.');
    }

    // Check minimum interval between API calls
    if (_lastApiCall != null) {
      final timeSinceLastCall = now.difference(_lastApiCall!);
      if (timeSinceLastCall < _minApiInterval) {
        final waitTime = _minApiInterval - timeSinceLastCall;
        await Future.delayed(waitTime);
      }
    }

    _lastApiCall = DateTime.now();
  }

  /// Estimate tokens for input text (rough estimation)
  int _estimateTokens(String text) {
    // Rough estimation: 1 token ‚âà 4 characters for English, 2-3 for Vietnamese
    return (text.length / 3).ceil();
  }
}
