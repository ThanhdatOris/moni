import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:logger/logger.dart';

import '../models/category_model.dart';
import '../models/transaction_model.dart';
import 'category_cache_service.dart';
import 'environment_service.dart';

/// Service qu·∫£n l√Ω danh m·ª•c giao d·ªãch
class CategoryService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final Logger _logger = Logger();
  final CategoryCacheService _cacheService = CategoryCacheService();

  /// T·∫°o danh m·ª•c m·ªõi
  Future<String> createCategory(CategoryModel category) async {
    try {
      final user = _auth.currentUser;
      if (user == null) {
        throw Exception('Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p');
      }

      final now = DateTime.now();
      final categoryData = category.copyWith(
        userId: user.uid,
        createdAt: now,
        updatedAt: now,
      );

      final docRef = await _firestore
          .collection('users')
          .doc(user.uid)
          .collection('categories')
          .add(categoryData.toMap());

      // ‚úÖ IMPROVED: Only log in debug mode with essential info
      if (EnvironmentService.debugMode) {
        _logger.d('üìÅ Category created: ${category.name} (${docRef.id})');
      }
      return docRef.id;
    } catch (e) {
      _logger.e('‚ùå Error creating category: $e');
      throw Exception('Kh√¥ng th·ªÉ t·∫°o danh m·ª•c: $e');
    }
  }

  /// C·∫≠p nh·∫≠t danh m·ª•c
  Future<void> updateCategory(CategoryModel category) async {
    try {
      final user = _auth.currentUser;
      if (user == null) {
        throw Exception('Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p');
      }

      final updatedCategory = category.copyWith(
        updatedAt: DateTime.now(),
      );

      await _firestore
          .collection('users')
          .doc(user.uid)
          .collection('categories')
          .doc(category.categoryId)
          .update(updatedCategory.toMap());

      // ‚úÖ IMPROVED: Only log in debug mode with essential info
      if (EnvironmentService.debugMode) {
        _logger.d('üìù Category updated: ${category.name} (${category.categoryId})');
      }
    } catch (e) {
      _logger.e('‚ùå L·ªói c·∫≠p nh·∫≠t danh m·ª•c: $e');
      throw Exception('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t danh m·ª•c: $e');
    }
  }

  /// X√≥a danh m·ª•c
  Future<void> deleteCategory(String categoryId) async {
    try {
      final user = _auth.currentUser;
      if (user == null) {
        throw Exception('Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p');
      }

      // Ki·ªÉm tra xem danh m·ª•c c√≥ ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng kh√¥ng
      final hasTransactions = await _hasTransactionsInCategory(categoryId);
      if (hasTransactions) {
        throw Exception('Kh√¥ng th·ªÉ x√≥a danh m·ª•c ƒëang c√≥ giao d·ªãch');
      }

      // X√≥a t·∫•t c·∫£ danh m·ª•c con tr∆∞·ªõc
      await _deleteChildCategories(categoryId);

      // X√≥a danh m·ª•c ch√≠nh
      await _firestore
          .collection('users')
          .doc(user.uid)
          .collection('categories')
          .doc(categoryId)
          .delete();

      // ‚úÖ IMPROVED: Only log in debug mode with essential info
      if (EnvironmentService.debugMode) {
        _logger.d('üóëÔ∏è Category deleted: $categoryId');
      }
    } catch (e) {
      _logger.e('‚ùå L·ªói x√≥a danh m·ª•c: $e');
      throw Exception('Kh√¥ng th·ªÉ x√≥a danh m·ª•c: $e');
    }
  }

  /// G√°n danh m·ª•c cha
  Future<void> setParent(String categoryId, String parentId) async {
    try {
      final user = _auth.currentUser;
      if (user == null) {
        throw Exception('Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p');
      }

      await _firestore
          .collection('users')
          .doc(user.uid)
          .collection('categories')
          .doc(categoryId)
          .update({
        'parent_id': parentId,
        'updated_at': Timestamp.fromDate(DateTime.now()),
      });

      // ‚úÖ IMPROVED: Only log in debug mode with essential info
      if (EnvironmentService.debugMode) {
        _logger.d('üîó Category parent set: $categoryId ‚Üí $parentId');
      }
    } catch (e) {
      _logger.e('‚ùå L·ªói g√°n danh m·ª•c cha: $e');
      throw Exception('Kh√¥ng th·ªÉ g√°n danh m·ª•c cha: $e');
    }
  }

  /// L·∫•y danh s√°ch danh m·ª•c c·ªßa ng∆∞·ªùi d√πng v·ªõi cache t·ªëi ∆∞u
  Stream<List<CategoryModel>> getCategoriesOptimized({
    TransactionType? type,
  }) async* {
    try {
      final user = _auth.currentUser;
      if (user == null) {
        yield [];
        return;
      }

      // Ki·ªÉm tra cache tr∆∞·ªõc
      if (type != null) {
        final cachedCategories = _cacheService.getCachedCategories(type);
        if (cachedCategories != null) {
          yield cachedCategories;
        }
      }

      // L·∫•y d·ªØ li·ªáu t·ª´ Firestore
      Query query = _firestore
          .collection('users')
          .doc(user.uid)
          .collection('categories')
          .where('is_deleted', isEqualTo: false);

      // √Åp d·ª•ng filter type n·∫øu c√≥
      if (type != null) {
        query = query.where('type', isEqualTo: type.value);
      } else {
        query = query.orderBy('name');
      }

      await for (final snapshot in query.snapshots()) {
        var categories = snapshot.docs.map((doc) {
          return CategoryModel.fromMap(
            doc.data() as Map<String, dynamic>,
            doc.id,
          );
        }).toList();

        // S·∫Øp x·∫øp trong client n·∫øu c·∫ßn
        if (type != null) {
          categories.sort((a, b) => a.name.compareTo(b.name));
          // Cache k·∫øt qu·∫£
          _cacheService.setCachedCategories(type, categories);
        }

        yield categories;
      }
    } catch (e) {
      _logger.e('L·ªói l·∫•y danh s√°ch danh m·ª•c: $e');
      yield [];
    }
  }

  /// L·∫•y danh s√°ch danh m·ª•c c·ªßa ng∆∞·ªùi d√πng
  Stream<List<CategoryModel>> getCategories({
    TransactionType? type,
  }) {
    try {
      final user = _auth.currentUser;
      if (user == null) {
        return Stream.value([]);
      }

      Query query = _firestore
          .collection('users')
          .doc(user.uid)
          .collection('categories')
          .where('is_deleted', isEqualTo: false);

      // √Åp d·ª•ng filter type n·∫øu c√≥
      if (type != null) {
        // ‚úÖ IMPROVED: Only log filtering in debug mode
        if (EnvironmentService.debugMode) {
          _logger.d('üîç Filtering categories by type: ${type.value}');
        }
        query = query.where('type', isEqualTo: type.value);
        // Kh√¥ng th√™m orderBy khi c√≥ where clause ƒë·ªÉ tr√°nh c·∫ßn composite index
      } else {
        // Ch·ªâ orderBy khi kh√¥ng c√≥ where clause ph·ª©c t·∫°p
        query = query.orderBy('name');
      }

      return query.snapshots().map((snapshot) {
        // ‚úÖ IMPROVED: Only log query results in debug mode with consolidated info
        if (EnvironmentService.debugMode) {
          _logger.d('üì¶ Categories query returned ${snapshot.docs.length} documents${type != null ? " (filtered by ${type.value})" : ""}');
        }
        
        var categories = snapshot.docs.map((doc) {
          final data = doc.data() as Map<String, dynamic>;
          return CategoryModel.fromMap(data, doc.id);
        }).toList();

        // S·∫Øp x·∫øp trong client n·∫øu c·∫ßn
        if (type != null) {
          categories.sort((a, b) => a.name.compareTo(b.name));
        }

        return categories;
      });
    } catch (e) {
      _logger.e('‚ùå Error getting categories: $e');
      return Stream.value([]);
    }
  }

  /// L·∫•y danh m·ª•c cha (kh√¥ng c√≥ parent_id)
  Stream<List<CategoryModel>> getParentCategories({TransactionType? type}) {
    try {
      final user = _auth.currentUser;
      if (user == null) {
        return Stream.value([]);
      }

      Query query = _firestore
          .collection('users')
          .doc(user.uid)
          .collection('categories')
          .where('parent_id', isNull: true)
          .orderBy('name');

      if (type != null) {
        query = query.where('type', isEqualTo: type.value);
      }

      return query.snapshots().map((snapshot) {
        return snapshot.docs.map((doc) {
          return CategoryModel.fromMap(
              doc.data() as Map<String, dynamic>, doc.id);
        }).toList();
      });
    } catch (e) {
      _logger.e('‚ùå Error getting parent categories: $e');
      return Stream.value([]);
    }
  }

  /// L·∫•y danh m·ª•c con c·ªßa m·ªôt danh m·ª•c cha
  Stream<List<CategoryModel>> getChildCategories(String parentId) {
    try {
      final user = _auth.currentUser;
      if (user == null) {
        return Stream.value([]);
      }

      return _firestore
          .collection('users')
          .doc(user.uid)
          .collection('categories')
          .where('parent_id', isEqualTo: parentId)
          .orderBy('name')
          .snapshots()
          .map((snapshot) {
        return snapshot.docs.map((doc) {
          return CategoryModel.fromMap(
              doc.data() as Map<String, dynamic>, doc.id);
        }).toList();
      });
    } catch (e) {
      _logger.e('‚ùå Error getting child categories: $e');
      return Stream.value([]);
    }
  }

  /// L·∫•y chi ti·∫øt m·ªôt danh m·ª•c
  Future<CategoryModel?> getCategory(String categoryId) async {
    try {
      final user = _auth.currentUser;
      if (user == null) {
        throw Exception('Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p');
      }

      final doc = await _firestore
          .collection('users')
          .doc(user.uid)
          .collection('categories')
          .doc(categoryId)
          .get();

      if (doc.exists && doc.data() != null) {
        return CategoryModel.fromMap(
            doc.data() as Map<String, dynamic>, doc.id);
      }
      return null;
    } catch (e) {
      _logger.e('‚ùå Error getting category details: $e');
      return null;
    }
  }

  /// L·∫•y danh m·ª•c m·∫∑c ƒë·ªãnh c·ªßa ng∆∞·ªùi d√πng
  Stream<List<CategoryModel>> getDefaultCategories({TransactionType? type}) {
    try {
      final user = _auth.currentUser;
      if (user == null) {
        return Stream.value([]);
      }

      Query query = _firestore
          .collection('users')
          .doc(user.uid)
          .collection('categories')
          .where('is_default', isEqualTo: true)
          .orderBy('name');

      if (type != null) {
        query = query.where('type', isEqualTo: type.value);
      }

      return query.snapshots().map((snapshot) {
        return snapshot.docs.map((doc) {
          return CategoryModel.fromMap(
              doc.data() as Map<String, dynamic>, doc.id);
        }).toList();
      });
    } catch (e) {
      _logger.e('‚ùå Error getting default categories: $e');
      return Stream.value([]);
    }
  }

  /// T·∫°o danh m·ª•c m·∫∑c ƒë·ªãnh cho ng∆∞·ªùi d√πng m·ªõi
  Future<void> createDefaultCategories() async {
    try {
      final user = _auth.currentUser;
      if (user == null) {
        throw Exception('Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p');
      }

      // Ki·ªÉm tra xem ƒë√£ c√≥ danh m·ª•c ch∆∞a
      final existingCategories = await _firestore
          .collection('users')
          .doc(user.uid)
          .collection('categories')
          .limit(1)
          .get();

      if (existingCategories.docs.isNotEmpty) {
        // ‚úÖ IMPROVED: Only log in debug mode 
        if (EnvironmentService.debugMode) {
          _logger.d('üìÅ Default categories already exist, skipping creation');
        }
        return;
      }

      final now = DateTime.now();
      final batch = _firestore.batch();

      // Danh m·ª•c chi ti√™u v·ªõi emoji
      final expenseCategories = [
        {
          'name': 'ƒÇn u·ªëng',
          'icon': 'üçΩÔ∏è',
          'iconType': 'emoji',
          'color': 0xFFFF6B35
        },
        {
          'name': 'Di chuy·ªÉn',
          'icon': 'üöó',
          'iconType': 'emoji',
          'color': 0xFF2196F3
        },
        {
          'name': 'Mua s·∫Øm',
          'icon': 'üõí',
          'iconType': 'emoji',
          'color': 0xFF9C27B0
        },
        {
          'name': 'Gi·∫£i tr√≠',
          'icon': 'üé¨',
          'iconType': 'emoji',
          'color': 0xFFFF9800
        },
        {
          'name': 'H√≥a ƒë∆°n',
          'icon': 'üßæ',
          'iconType': 'emoji',
          'color': 0xFFF44336
        },
        {
          'name': 'Y t·∫ø',
          'icon': 'üè•',
          'iconType': 'emoji',
          'color': 0xFF4CAF50
        },
      ];

      // Danh m·ª•c thu nh·∫≠p v·ªõi emoji
      final incomeCategories = [
        {
          'name': 'L∆∞∆°ng',
          'icon': 'üíº',
          'iconType': 'emoji',
          'color': 0xFF4CAF50
        },
        {
          'name': 'Th∆∞·ªüng',
          'icon': 'üéÅ',
          'iconType': 'emoji',
          'color': 0xFFFFD700
        },
        {
          'name': 'ƒê·∫ßu t∆∞',
          'icon': 'üìà',
          'iconType': 'emoji',
          'color': 0xFF00BCD4
        },
        {
          'name': 'Kh√°c',
          'icon': 'üí∞',
          'iconType': 'emoji',
          'color': 0xFF607D8B
        },
      ];

      // T·∫°o danh m·ª•c chi ti√™u
      for (final categoryData in expenseCategories) {
        final docRef = _firestore
            .collection('users')
            .doc(user.uid)
            .collection('categories')
            .doc();

        final category = CategoryModel(
          categoryId: docRef.id,
          userId: user.uid,
          name: categoryData['name'] as String,
          type: TransactionType.expense,
          icon: categoryData['icon'] as String,
          iconType: CategoryIconType.fromString(
              categoryData['iconType'] as String? ?? 'material'),
          color: categoryData['color'] as int,
          isDefault: true,
          parentId: null,
          createdAt: now,
          updatedAt: now,
          isDeleted: false,
        );

        batch.set(docRef, category.toMap());
      }

      // T·∫°o danh m·ª•c thu nh·∫≠p
      for (final categoryData in incomeCategories) {
        final docRef = _firestore
            .collection('users')
            .doc(user.uid)
            .collection('categories')
            .doc();

        final category = CategoryModel(
          categoryId: docRef.id,
          userId: user.uid,
          name: categoryData['name'] as String,
          type: TransactionType.income,
          icon: categoryData['icon'] as String,
          iconType: CategoryIconType.fromString(
              categoryData['iconType'] as String? ?? 'material'),
          color: categoryData['color'] as int,
          isDefault: true,
          parentId: null,
          createdAt: now,
          updatedAt: now,
          isDeleted: false,
        );

        batch.set(docRef, category.toMap());
      }

      await batch.commit();
      // ‚úÖ IMPROVED: Single comprehensive success message
      _logger.i('üìÅ Default categories created successfully (${expenseCategories.length + incomeCategories.length} categories)');
    } catch (e) {
      _logger.e('‚ùå Error creating default categories: $e');
      throw Exception('Kh√¥ng th·ªÉ t·∫°o danh m·ª•c m·∫∑c ƒë·ªãnh: $e');
    }
  }

  /// Get all categories for user (alias method for frontend compatibility)
  Future<List<CategoryModel>> getUserCategories(String userId) async {
    try {
      final snapshot = await _firestore
          .collection('users')
          .doc(userId)
          .collection('categories')
          .where('is_deleted', isEqualTo: false)
          .orderBy('name')
          .get();

      return snapshot.docs.map((doc) {
        return CategoryModel.fromMap(
            doc.data() as Map<String, dynamic>, doc.id);
      }).toList();
    } catch (e) {
      _logger.e('‚ùå Error getting user categories: $e');
      return [];
    }
  }

  /// Ki·ªÉm tra xem danh m·ª•c c√≥ giao d·ªãch kh√¥ng
  Future<bool> _hasTransactionsInCategory(String categoryId) async {
    try {
      final user = _auth.currentUser;
      if (user == null) return false;

      final snapshot = await _firestore
          .collection('users')
          .doc(user.uid)
          .collection('transactions')
          .where('category_id', isEqualTo: categoryId)
          .where('is_deleted', isEqualTo: false)
          .limit(1)
          .get();

      return snapshot.docs.isNotEmpty;
    } catch (e) {
      _logger.e('‚ùå Error checking transactions in category: $e');
      return true; // Err on the side of caution
    }
  }

  /// X√≥a t·∫•t c·∫£ danh m·ª•c con
  Future<void> _deleteChildCategories(String parentId) async {
    try {
      final user = _auth.currentUser;
      if (user == null) return;

      final snapshot = await _firestore
          .collection('users')
          .doc(user.uid)
          .collection('categories')
          .where('parent_id', isEqualTo: parentId)
          .get();

      final batch = _firestore.batch();
      for (final doc in snapshot.docs) {
        // Ki·ªÉm tra danh m·ª•c con c√≥ giao d·ªãch kh√¥ng
        final hasTransactions = await _hasTransactionsInCategory(doc.id);
        if (hasTransactions) {
          throw Exception('Kh√¥ng th·ªÉ x√≥a danh m·ª•c con ƒëang c√≥ giao d·ªãch');
        }
        batch.delete(doc.reference);
      }

      await batch.commit();
    } catch (e) {
      _logger.e('‚ùå Error deleting child categories: $e');
      rethrow;
    }
  }
}
